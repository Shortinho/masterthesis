return(pca_result)
}
perform_pca(df_l[[4]], plot_scores = T, plot_loadings = T)
scores_plot <- autoplot(
pca_result,
data = df,
colour = 'SampleID'
) +
labs(
title = paste("PCA Scores Plot for", df_name),
x = "Principal Component 1",
y = "Principal Component 2"
) +
guides(colour = guide_colorbar(reverse = T))+
theme_minimal()
# Function to perform PCA
perform_pca <- function(df,
df_name = NULL,
plot_scores = FALSE,
plot_loadings = FALSE,
print_results = FALSE) {
library(ggfortify)
library(ggplot2)
# Ensure the input dataframe is numeric
df_numeric <- df %>% select_if(is.numeric)
df_numeric <- df_numeric %>% select(-c(SampleID))
# Scale the data
df_scaled <- scale(df_numeric)
# Perform PCA
pca_result <- prcomp(df_scaled, center = TRUE, scale. = TRUE)
# Plot PCA scores (biplot) if plot_scores = TRUE
if (plot_scores) {
scores_plot <- autoplot(
pca_result,
data = df,
colour = 'SampleID'
) +
labs(
title = paste("PCA Scores Plot for", df_name),
x = "Principal Component 1",
y = "Principal Component 2"
) +
guides(colour = guide_colorbar(reverse = T))+
theme_minimal()
print(scores_plot)
}
# Plot PCA loadings if plot_loadings = TRUE
if (plot_loadings) {
loadings_plot <- autoplot(
pca_result,
loadings = TRUE,
loadings.label = TRUE,
loadings.label.size = 3
) +
labs(
title = paste("PCA Loadings Plot for", df_name),
x = "Principal Component 1",
y = "Principal Component 2"
) +
theme_minimal()
print(loadings_plot)
}
# Print PCA results with dataframe name
if (print_results) {
message <- if (!is.null(df_name)) {
paste("PCA results for dataframe:", df_name)
} else {
"PCA results:"
}
cat(message, "\n")
print(summary(pca_result))
cat("\n \n")
}
# Return the PCA result for further use
return(pca_result)
}
perform_pca(df_l[[4]], plot_scores = T, plot_loadings = T)
# Function to create downcore lineplots
plot_elements <- function(df, df_name = NULL, individual_plots = FALSE, output_dir = NULL) {
library(ggplot2)
library(dplyr)
library(tidyr)
# Ensure the dataframe contains the necessary structure
if (!"SampleID" %in% names(df)) {
stop("The dataframe must have a 'SampleID' column.")
}
# Get element columns (exclude 'SampleID')
elements <- setdiff(names(df), "SampleID")
# Pivot to long format for ggplot2
df_long <- df %>%
pivot_longer(cols = all_of(elements), names_to = "Element", values_to = "Value")
# Combined plot for all elements
if (!individual_plots) {
combined_plot <- ggplot(df_long, aes(x = SampleID, y = Value, color = Element)) +
geom_line(size = 0.8, alpha = 0.8) +
labs(
title = paste("Combined Element Line Plot for", df_name),
x = "Sample ID",
y = "Value",
color = "Element"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 8),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)
)
print(combined_plot)
}
# Individual plots for each element
if (individual_plots) {
if (!is.null(output_dir)) {
dir.create(output_dir, showWarnings = FALSE)  # Create output directory if not exists
}
for (element in elements) {
element_plot <- ggplot(df_long %>% filter(Element == element), aes(x = SampleID, y = Value)) +
geom_line(color = "blue", size = 0.8, alpha = 0.8) +
labs(
title = paste("Line Plot for", element, "in", df_name),
x = "Sample ID",
y = element
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
axis.text.y = element_text(size = 8)
)
print(element_plot)
# Save individual plots if output_dir is provided
if (!is.null(output_dir)) {
ggsave(
filename = file.path(output_dir, paste0(df_name, "_", element, ".png")),
plot = element_plot,
width = 8, height = 5
)
}
}
}
}
plot_elements(df_l[[4]])
?setdiff
# Function to create downcore lineplots
plot_elements <- function(df, df_name = NULL, individual_plots = FALSE, output_dir = NULL) {
library(ggplot2)
library(dplyr)
library(tidyr)
df_long <- df %>%
pivot_longer(cols = all_of(elements), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(y = Value, x = SampleID)) +
geom_path(aes(group = Variable), linewidth=0.15) +
facet_wrap(~ Variable, scales = "free_x", ncol = (length(elements))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6),
axis.text.y = element_text(size = 6),
axis.title = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "none",
aspect.ratio = 10) +
labs(title = paste("XRFnorm Analysis -", df_name),
y = "Concentration",
x = "Sample ID (depth)") +
coord_flip() +
scale_x_reverse()
}
plot_elements(df_l[[3]])
# Function to create downcore lineplots
plot_elements <- function(df, df_name = NULL, individual_plots = FALSE, output_dir = NULL) {
library(ggplot2)
library(dplyr)
library(tidyr)
elements <- names(df) %>%
select(-c(SampleID))
df_long <- df %>%
pivot_longer(cols = all_of(elements), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(y = Value, x = SampleID)) +
geom_path(aes(group = Variable), linewidth=0.15) +
facet_wrap(~ Variable, scales = "free_x", ncol = (length(elements))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6),
axis.text.y = element_text(size = 6),
axis.title = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "none",
aspect.ratio = 10) +
labs(title = paste("XRFnorm Analysis -", df_name),
y = "Concentration",
x = "Sample ID (depth)") +
coord_flip() +
scale_x_reverse()
}
plot_elements(df_l[[3]])
names(df_l[[3]])
# Function to create downcore lineplots
plot_elements <- function(df, df_name = NULL, individual_plots = FALSE, output_dir = NULL) {
library(ggplot2)
library(dplyr)
library(tidyr)
elements <- names(df) %>%
select(-c("SampleID"))
df_long <- df %>%
pivot_longer(cols = all_of(elements), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(y = Value, x = SampleID)) +
geom_path(aes(group = Variable), linewidth=0.15) +
facet_wrap(~ Variable, scales = "free_x", ncol = (length(elements))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6),
axis.text.y = element_text(size = 6),
axis.title = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "none",
aspect.ratio = 10) +
labs(title = paste("XRFnorm Analysis -", df_name),
y = "Concentration",
x = "Sample ID (depth)") +
coord_flip() +
scale_x_reverse()
}
names(df_l[[3]])
plot_elements(df_l[[3]])
# Function to create downcore lineplots
plot_elements <- function(df, df_name = NULL, individual_plots = FALSE, output_dir = NULL) {
library(ggplot2)
library(dplyr)
library(tidyr)
elements <- df %>%
select(-c(SampleID)) %>%
names()
df_long <- df %>%
pivot_longer(cols = all_of(elements), names_to = "Variable", values_to = "Value")
ggplot(df_long, aes(y = Value, x = SampleID)) +
geom_path(aes(group = Variable), linewidth=0.15) +
facet_wrap(~ Variable, scales = "free_x", ncol = (length(elements))) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6),
axis.text.y = element_text(size = 6),
axis.title = element_text(size = 8),
strip.text = element_text(size = 8),
legend.position = "none",
aspect.ratio = 10) +
labs(title = paste("XRFnorm Analysis -", df_name),
y = "Concentration",
x = "Sample ID (depth)") +
coord_flip() +
scale_x_reverse()
}
plot_elements(df_l[[3]])
plot_elements(df_l[[3]],names(df_l)[[3]])
plot_elements(df_l[[1]],names(df_l)[[1]])
plot_elements(df_l[[2]],names(df_l)[[2]])
?dir.create
is.null(NULL)
?prcomp
memory.limit()
install.packages("unix")
rlimit_as(1e12)  #increases to ~12G
library(dplyr)
library(ggplot2)
library(tidyr)
library(corrplot)
load_data <- function(){
library(readxl)
#### Import data ####
xrf_data_path <- "/Users/maxshore/Documents/Unibe/MasterThesis/R/data/XRF Data"
f_norm200mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.2mm_Cr_Results/POS-22-20_0.2mm_Cr_normZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_norm500mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.5mm_Cr_Results/POS-22-20_0.5mm_Cr_normZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_clr200mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.2mm_Cr_Results/POS-22-20_0.2mm_Cr_clrZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_clr500mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.5mm_Cr_Results/POS-22-20_0.5mm_Cr_clrZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
# Create a list of dataframes
df_list <- list(norm200 = f_norm200mu,
norm500 = f_norm500mu,
clr200 = f_clr200mu,
clr500 = f_clr500mu)
}
source("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
source("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
rm(df_list)
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = norm_200)
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
debugSource("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
View(df)
debugSource("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
debugSource("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL, output_dir = plots/periodicity)
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL, output_dir = '/plots/periodicity')
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL, output_dir = '/plots/periodicity/')
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL, output_dir = '/plots/periodicity/')
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
source("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
source("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
install.packages('signal')
source("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
source("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
perform_periodicity_analysis(df_l$norm200, 'Fe', df_name = NULL)
# preliminary data exploration functions
library(dplyr)
library(ggplot2)
library(tidyr)
library(corrplot)
load_data <- function(){
library(readxl)
#### Import data ####
xrf_data_path <- "/Users/maxshore/Documents/Unibe/MasterThesis/R/data/XRF Data"
f_norm200mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.2mm_Cr_Results/POS-22-20_0.2mm_Cr_normZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_norm500mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.5mm_Cr_Results/POS-22-20_0.5mm_Cr_normZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_clr200mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.2mm_Cr_Results/POS-22-20_0.2mm_Cr_clrZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_clr500mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.5mm_Cr_Results/POS-22-20_0.5mm_Cr_clrZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
# Create a list of dataframes
df_list <- list(norm200 = f_norm200mu,
norm500 = f_norm500mu,
clr200 = f_clr200mu,
clr500 = f_clr500mu)
}
load_data <- function(){
library(readxl)
#### Import data ####
xrf_data_path <- "/Users/maxshore/Documents/Unibe/MasterThesis/R/data/XRF Data"
f_norm200mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.2mm_Cr_Results/POS-22-20_0.2mm_Cr_normZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_norm500mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.5mm_Cr_Results/POS-22-20_0.5mm_Cr_normZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_clr200mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.2mm_Cr_Results/POS-22-20_0.2mm_Cr_clrZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
f_clr500mu <- read_excel(paste(xrf_data_path,
"/POS-22-20_0.5mm_Cr_Results/POS-22-20_0.5mm_Cr_clrZnNi.xlsx",
sep = ""),
skip=2) %>%
tibble()
# Create a list of dataframes
df_list <- list(norm200 = f_norm200mu,
norm500 = f_norm500mu,
clr200 = f_clr200mu,
clr500 = f_clr500mu)
}
# Function to clean dataframes
clean_df <- function(df_list) {
library(purrr)
elements = c('Al','Si','P','S','K','Ca','Ti','Mn','Fe','Ni','Zn','Rb','Sr','Zr','Ba')
# make all column names universal (remove spaces)
names.list <- map(df_list, names)
tidy.names <- map(names.list, ~make.names(.x, unique = T))
df_list <- map2(df_list, tidy.names, ~{
names(.x) <- .y
.x
})
# keep only desired data points (remove non-sediment measurements)
df_pos <- map (df_list, ~filter(.x, position..mm. >25 & position..mm. <1255.7))
# remove unwanted variables
cleaned_df <- map(df_pos, ~select(.x, -any_of(c('filename', 'Voltage', 'Amperage', 'CoreID', 'SectionID', 'RepID', 'DepthID', 'cps', 'MSE', 'Dt','Cr inc', 'Cr coh', 'Ar', 'SampleID', 'Cr.inc', 'Cr.coh'
))))
return(cleaned_df)
}
# Source the functions
source("xrf_functions.R")
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
library(ggplot2)
library(tidyr)
library(corrplot)
library(dplyr)
library(ggplot2)
library(tidyr)
library(corrplot)
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
# Clean dataframes
df_l <- clean_df(df_list)
names.list
names.list[[±]]
names.list[[1]]
tidy.names[[1]]
df_list[[1]]
# Source the functions
source("xrf_functions.R")
# Source the functions
source("xrf_functions.R")
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
# Source the functions
source("xrf_functions.R")
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
rlang::last_trace()
# Clean dataframes
df_l <- clean_df(df_list)
# Source the functions
source("xrf_functions.R")
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
df_[[1]]
df_l[[1]]
make_long(df_l[[1]])
#clustering
df_cluster <- map2(df_l, names(df_l), ~perform_clustering(.x, .y, k = 3, method = "kmeans"))
df_cluster[[]]
df_cluster[[1]]
make_long(df_cluster[[1]])
make_long_clust(df_cluster[[1]])
print(n=500)
print(make_long_clust(df_cluster[[1]]),n=300)
print(tail(make_long_clust(df_cluster[[1]])))
# Source the functions
source("xrf_functions.R")
df_list <- load_data()
# Clean dataframes
df_l <- clean_df(df_list)
rm(df_list)
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
rlang::last_trace()
# Source the functions
source("xrf_functions.R")
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
rlang::last_trace()
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
?dplyr::filter
# Source the functions
source("xrf_functions.R")
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
names(df_l[[1]])
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
# Source the functions
source("xrf_functions.R")
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
tail(df_l)
tail(df_l[[1]])
df_list <- load_data()
source("xrf_functions.R")
#### Import data ####
df_list <- load_data()
#### Execution ####
# Clean dataframes
df_l <- clean_df(df_list)
rm(df_list)
# Filter out the top portion
df_l <- map(df_l, select_top_varves)
debugSource("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
debugSource("~/Documents/Unibe/MasterThesis/R/xrf_functions.R")
# Source the functions
source("xrf_functions.R")
source("~/Documents/Unibe/MasterThesis/R/xrf_analysis_top_varves.R")
#clustering
df_cluster <- map2(df_l, names(df_l), ~perform_clustering(.x, .y, k = 3, method = "kmeans"))
#clustering
df_cluster <- map2(df_l, names(df_l), ~perform_clustering(.x, .y, k = 3, method = "kmeans"))
map2(df_cluster, names(df_cluster), ~visualize_clusters(.x, .y, output_dir = 'plots/clusterViz_top'))
?ncol
